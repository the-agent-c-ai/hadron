# Global options
{
	# Email for Let's Encrypt notifications
	email {$EMAIL}

	# Use production Let's Encrypt by default
	# For testing, add: acme_ca https://acme-staging-v02.api.letsencrypt.org/directory

	# Disable HTTP->HTTPS redirects but keep automatic certificate management
	# Without port 80 bound, Caddy will use TLS-ALPN-01 challenge on port 443
	auto_https disable_redirects

	# Prometheus
	admin :2019
}

# Endpoint
https://{$DOMAIN} {

	# Rate limit: 500 requests per minute per IP
	#    rate_limit {
	#        zone dynamic {
	#            key {http.request.remote.host}
	#            events 500
	#            window 1m
	#        }
	#    }

    @scanners {
        path *.php *.asp *.aspx *.jsp
        path /wp-* /wordpress/* /xmlrpc.php
        path /.git/* /config/* /.aws/*
        path /admin /php*
        path /api/v1/pods/* # k8s scanners
        path /.well-known/security.txt # unless you actually have one
        path *.env*
    }

    @bad_bots {
        header_regexp User-Agent "(?i)(curl|masscan|zgrab|nmap|sqlmap|nikto)"
        header User-Agent *crawler*
        header User-Agent *scanner*
        header User-Agent python-requests*
    }

    @bad_methods {
        method TRACE TRACK OPTIONS
    }

    handle @scanners {
        log_name shit
        abort
    }

    handle @bad_bots {
        log_name shit
        abort
    }

    handle @bad_methods {
        log_name shit
        abort
    }

	@webhooks path {$MOUNTPOINT}

	handle @webhooks {
        log_name proper
        # Reverse proxy to SCIM bridge
        reverse_proxy {$REVERSE}:{$REVERSE_PORT} {
            health_uri {$REVERSE_HEALTH}
            health_port {$REVERSE_HEALTH_PORT}
            health_interval 30s
            health_timeout 5s

            # Forward real client IP
            header_up X-Real-IP {http.request.remote.host}

            # Transport settings
            transport http {
                read_buffer 4096
                write_buffer 4096
                max_response_header 10MiB
                dial_timeout 10s
                response_header_timeout 30s
            }
        }
	}

	# Serve robots.txt
	handle /robots.txt {
		log_name proper
		respond "User-agent: *
Disallow: /" 200 {
			close
		}
	}

	# Serve favicon
	handle /favicon.ico {
		log_name proper
		root * /etc/caddy/static/imgs
		file_server
	}

	# Block all other requests
	handle {
        log_name shit
        abort
	}

	# Security headers
	header {
		# Remove server identification
		-Server

		# Prevent clickjacking
		X-Frame-Options "DENY"

		# XSS protection
		X-Content-Type-Options "nosniff"

		# XSS protection (legacy but defense in depth)
		X-XSS-Protection "1; mode=block"

		# Strict transport security (HTTPS only)
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

		Referrer-Policy "strict-origin-when-cross-origin"

		# Content Security Policy (adjust as needed)
		Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'"
	}

	log proper {
		output stdout
		format json
		level {$LOG_LEVEL}
		no_hostname
	}

    log shit {
		output stdout
		format json
		level {$LOG_LEVEL}
		no_hostname
    }

	# Error handling with static pages
	handle_errors {
		root * /etc/caddy/static
		rewrite * /errors/{err.status_code}.html
		file_server
	}
}
