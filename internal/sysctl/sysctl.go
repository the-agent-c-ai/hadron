// Package sysctl provides OS-level kernel parameter hardening via sysctl.
package sysctl

import (
	"fmt"

	"github.com/the-agent-c-ai/hadron/sdk/ssh"
)

const sysctlConfigPath = "/etc/sysctl.d/99-hadron-security.conf"

// SecurityConfig returns balanced security hardening sysctl configuration.
// This configuration is Docker-compatible and doesn't break normal operations.
func SecurityConfig() string {
	return `# /etc/sysctl.d/99-hadron-security.conf
# Balanced security hardening - doesn't break Docker/debugging/normal operations
# Generated by Hadron

# ============================================================================
# NETWORK: IPv4
# ============================================================================

# IP forwarding - REQUIRED for Docker
net.ipv4.ip_forward = 1

# Anti-spoofing: Use loose mode (2) to allow asymmetric routing
# Mode 1 breaks multi-homed setups, cloud networking, Docker in some configs
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2

# Ignore ICMP redirects (prevents MITM via malicious redirects)
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# Don't send ICMP redirects (we're not a router)
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Ignore source-routed packets
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# Ignore bogus ICMP error responses
net.ipv4.icmp_ignore_bogus_error_responses = 1

# SYN flood protection
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_synack_retries = 2

# Protect against TCP time-wait assassination
net.ipv4.tcp_rfc1337 = 1

# ============================================================================
# NETWORK: IPv6
# ============================================================================

# Ignore IPv6 ICMP redirects
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Ignore IPv6 router advertisements
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0

# Ignore IPv6 source routing
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# ============================================================================
# KERNEL: Security
# ============================================================================

# Restrict access to kernel logs (prevent information disclosure)
kernel.dmesg_restrict = 1

# Restrict access to kernel pointers in /proc
kernel.kptr_restrict = 2

# Disable kernel profiling by unprivileged users
kernel.perf_event_paranoid = 3

# Prevent kernel address exposure via /proc/kallsyms
kernel.kptr_restrict = 1

# ============================================================================
# KERNEL: Process Control
# ============================================================================

# Restrict ptrace to CAP_SYS_PTRACE only (prevents process injection)
kernel.yama.ptrace_scope = 1

# ============================================================================
# FILE SYSTEM
# ============================================================================

# Prevent creation of hard links to files you don't own
fs.protected_hardlinks = 1

# Prevent creation of symbolic links to files you don't own
fs.protected_symlinks = 1

# Increase inotify watchers (useful for development tools, IDEs)
fs.inotify.max_user_watches = 524288

# ============================================================================
# VIRTUAL MEMORY
# ============================================================================

# Reduce swap usage (prefer RAM for better performance)
# 10 = swap only when necessary
vm.swappiness = 10

# Increase dirty page cache flush interval (better I/O performance)
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5

# ============================================================================
# Caddy / http3
# ============================================================================

# UDP buffer sizes for QUIC/HTTP3
net.core.rmem_max = 7500000
net.core.wmem_max = 7500000
`
}

// Apply writes the security configuration and loads it into the kernel.
func Apply(client ssh.Connection) error {
	config := SecurityConfig()

	// Write to temp file first (SFTP can't write directly to /etc/ as non-root)
	tempPath := "/tmp/hadron-sysctl.conf"
	if err := client.UploadData([]byte(config), tempPath); err != nil {
		return fmt.Errorf("failed to write temp sysctl config: %w", err)
	}

	// Move temp file to final location with sudo
	moveCmd := fmt.Sprintf("sudo mv %s %s", tempPath, sysctlConfigPath)

	_, stderr, err := client.Execute(moveCmd)
	if err != nil {
		return fmt.Errorf("failed to move sysctl config: %w (stderr: %s)", err, stderr)
	}

	// Apply configuration immediately
	applyCmd := "sudo sysctl -p " + sysctlConfigPath

	_, stderr, err = client.Execute(applyCmd)
	if err != nil {
		return fmt.Errorf("failed to apply sysctl config: %w (stderr: %s)", err, stderr)
	}

	return nil
}
