// Package sshd provides SSH daemon security hardening.
package sshd

import (
	"fmt"

	"github.com/the-agent-c-ai/hadron/sdk/ssh"
)

const sshdConfigPath = "/etc/ssh/sshd_config"

// SecureConfig returns hardened SSH daemon configuration.
// Ed25519 only, no password authentication, modern cryptography.
func SecureConfig() string {
	return `# /etc/ssh/sshd_config
# Hardened SSH configuration - Ed25519 only, no bullshit
# Generated by Hadron

# ============================================================================
# NETWORK & BINDING
# ============================================================================

Port 22
AddressFamily inet

# ============================================================================
# HOST KEYS - Ed25519 ONLY
# ============================================================================

# Only use Ed25519 - disable all legacy key types
HostKey /etc/ssh/ssh_host_ed25519_key

# ============================================================================
# AUTHENTICATION
# ============================================================================

# Public key authentication ONLY
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Disable ALL password authentication
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Disable other authentication methods
KerberosAuthentication no
GSSAPIAuthentication no

# ============================================================================
# CRYPTOGRAPHY - Modern algorithms only
# ============================================================================

# Key exchange algorithms - strongest first
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org

# Ciphers - AES-GCM and ChaCha20 only
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com

# MACs - strongest first
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Disable X11, agent, TCP forwarding (can enable per-user if needed)
X11Forwarding no
AllowAgentForwarding no
AllowTcpForwarding no

# Disable tunneling
PermitTunnel no

# Strict modes
StrictModes yes

# Limit authentication attempts
MaxAuthTries 3
MaxSessions 5

# Connection timeouts
LoginGraceTime 20
ClientAliveInterval 300
ClientAliveCountMax 2

# Disable rhosts
IgnoreRhosts yes
HostbasedAuthentication no

# ============================================================================
# LOGGING
# ============================================================================

# Verbose logging for security auditing
LogLevel VERBOSE
SyslogFacility AUTH

# ============================================================================
# PROTOCOL
# ============================================================================

# Protocol 2 only (default in modern OpenSSH, but explicit is better)

# ============================================================================
# BANNER & MOTD
# ============================================================================

# Disable banner (information disclosure)
Banner none

# Don't print MOTD (keep it clean)
PrintMotd no

# ============================================================================
# SUBSYSTEMS
# ============================================================================

# SFTP subsystem (needed for scp/sftp)
Subsystem sftp /usr/lib/openssh/sftp-server

# ============================================================================
# MISC
# ============================================================================

# Compression (disable to prevent potential attacks, or use delayed)
Compression no

# Use kernel sandbox for privilege separation
UsePrivilegeSeparation sandbox

# DNS checks (can slow down login, set to 'no' if needed)
UseDNS no
`
}

// Apply writes the hardened SSH configuration and restarts the daemon.
func Apply(client ssh.Connection) error {
	config := SecureConfig()

	// Backup existing config
	backupCmd := fmt.Sprintf("sudo cp %s %s.bak.$(date +%%s)", sshdConfigPath, sshdConfigPath)

	_, stderr, err := client.Execute(backupCmd)
	if err != nil {
		return fmt.Errorf("failed to backup sshd_config: %w (stderr: %s)", err, stderr)
	}

	// Write new config
	writeCmd := fmt.Sprintf("echo '%s' | sudo tee %s > /dev/null", config, sshdConfigPath)

	_, stderr, err = client.Execute(writeCmd)
	if err != nil {
		return fmt.Errorf("failed to write sshd_config: %w (stderr: %s)", err, stderr)
	}

	// Test configuration before restarting
	testCmd := "sudo sshd -t"

	_, stderr, err = client.Execute(testCmd)
	if err != nil {
		return fmt.Errorf("sshd config test failed: %w (stderr: %s)", err, stderr)
	}

	// Reload SSH daemon (reload, not restart, to keep current connections alive)
	// Debian uses 'ssh' as the service name, not 'sshd'
	reloadCmd := "sudo systemctl reload ssh"

	_, stderr, err = client.Execute(reloadCmd)
	if err != nil {
		return fmt.Errorf("failed to reload ssh: %w (stderr: %s)", err, stderr)
	}

	return nil
}
