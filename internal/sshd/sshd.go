// Package sshd provides SSH daemon security hardening.
package sshd

import (
	"fmt"

	"github.com/the-agent-c-ai/hadron/sdk/ssh"
)

const sshdConfigPath = "/etc/ssh/sshd_config"

// SecureConfig returns hardened SSH daemon configuration.
// Ed25519 only, no password authentication, modern cryptography.
func SecureConfig() string {
	return `# /etc/ssh/sshd_config
# Hardened SSH configuration - Ed25519 only, no bullshit
# Generated by Hadron

# ============================================================================
# NETWORK & BINDING
# ============================================================================

# Listen on specific interface (change to your server IP, or use 0.0.0.0 for all)
# ListenAddress 0.0.0.0
Port 22

# Use IPv4 only (change to 'any' if you need IPv6)
AddressFamily inet

# ============================================================================
# HOST KEYS - Ed25519 ONLY
# ============================================================================

# Only use Ed25519 - disable all legacy key types
HostKey /etc/ssh/ssh_host_ed25519_key

# ============================================================================
# AUTHENTICATION
# ============================================================================

# Public key authentication ONLY
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Disable ALL password authentication
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Disable other authentication methods
KerberosAuthentication no
GSSAPIAuthentication no

# Disable root login
# PermitRootLogin no

# Only allow specific users (CHANGE THIS to your username)
# AllowUsers your_username

# Alternatively, use AllowGroups
# AllowGroups ssh-users

# ============================================================================
# CRYPTOGRAPHY - Modern algorithms only
# ============================================================================

# Key exchange algorithms - strongest first
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org

# Ciphers - Modern ciphers only (GCM, ChaCha20, CTR for compatibility)
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

# MAC algorithms - ETM (Encrypt-then-MAC) only
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com

# Public key algorithms - Ed25519 only
PubkeyAcceptedAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519

# Host key algorithms for client verification
HostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Strict mode - check permissions on home directory and key files
StrictModes yes

# Disable X11 forwarding
X11Forwarding no

# Disable TCP forwarding (uncomment if you need tunneling)
AllowTcpForwarding no
AllowStreamLocalForwarding no
GatewayPorts no
# XXX is this necessary?
# PermitTunnel no

# Disable agent forwarding (security risk)
AllowAgentForwarding no

# Disable .rhosts authentication
IgnoreRhosts yes
HostbasedAuthentication no

# Disable privilege separation (already default in modern SSH)
# UsePrivilegeSeparation sandbox

# Prevent user environment modifications
PermitUserEnvironment no

# ============================================================================
# SESSION LIMITS
# ============================================================================

# Login grace time - disconnect if no successful auth
LoginGraceTime 30

# Maximum authentication attempts before disconnect
MaxAuthTries 3

# Maximum concurrent sessions per connection
MaxSessions 5

# Maximum concurrent unauthenticated connections
MaxStartups 3:50:10

# Client alive interval (disconnect idle clients)
ClientAliveInterval 300
ClientAliveCountMax 2


# ============================================================================
# LOGGING
# ============================================================================

# Log level - VERBOSE logs key fingerprints (useful for auditing)
LogLevel VERBOSE

# Log to AUTH facility
SyslogFacility AUTH

# ============================================================================
# MISC
# ============================================================================

# Disable banner (information disclosure)
Banner none

# Disable printing of /etc/motd
PrintMotd no

# Disable last login info
PrintLastLog yes

# Use PAM (needed for some systems, disable if you don't need it)
UsePAM yes

# Disable DNS lookups (faster connections, but breaks hostname-based rules)
UseDNS no

# TCP keep-alive messages
TCPKeepAlive yes

# Compression - disable or delay for security
Compression no

# Subsystems - only SFTP if needed
Subsystem sftp /usr/lib/openssh/sftp-server

# ============================================================================
# HARDENING: Uncomment based on needs
# ============================================================================

# Chroot SFTP users to their home directory
# Match Group sftp-only
#     ChrootDirectory /home/%u
#     ForceCommand internal-sftp
#     AllowTcpForwarding no
#     X11Forwarding no

# Limit SSH to specific source IPs
# Match Address 192.168.1.0/24
#     AllowUsers your_username

# Two-factor authentication (if using Google Authenticator or similar)
# AuthenticationMethods publickey,keyboard-interactive

`
}

// Apply writes the hardened SSH configuration and restarts the daemon.
func Apply(client ssh.Connection) error {
	config := SecureConfig()

	// Backup existing config
	backupCmd := fmt.Sprintf("sudo cp %s %s.bak.$(date +%%s)", sshdConfigPath, sshdConfigPath)

	_, stderr, err := client.Execute(backupCmd)
	if err != nil {
		return fmt.Errorf("failed to backup sshd_config: %w (stderr: %s)", err, stderr)
	}

	// Write new config via temp file (avoids shell escaping issues)
	tempPath := "/tmp/hadron-sshd_config"
	if err := client.UploadData([]byte(config), tempPath); err != nil {
		return fmt.Errorf("failed to write temp sshd_config: %w", err)
	}

	// Move temp file to final location with sudo
	moveCmd := fmt.Sprintf("sudo mv %s %s", tempPath, sshdConfigPath)

	_, stderr, err = client.Execute(moveCmd)
	if err != nil {
		return fmt.Errorf("failed to move sshd_config: %w (stderr: %s)", err, stderr)
	}

	// Test configuration before restarting
	testCmd := "sudo sshd -t"

	_, stderr, err = client.Execute(testCmd)
	if err != nil {
		return fmt.Errorf("sshd config test failed: %w (stderr: %s)", err, stderr)
	}

	// Reload SSH daemon (reload, not restart, to keep current connections alive)
	// Debian uses 'ssh' as the service name, not 'sshd'
	reloadCmd := "sudo systemctl reload ssh"

	_, stderr, err = client.Execute(reloadCmd)
	if err != nil {
		return fmt.Errorf("failed to reload ssh: %w (stderr: %s)", err, stderr)
	}

	return nil
}
